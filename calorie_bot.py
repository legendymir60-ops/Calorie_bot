import os
import logging
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters,
    ConversationHandler
)
from PIL import Image

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini
from google import genai
from google.genai.errors import APIError 

# ‚¨áÔ∏è 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –∏ —Ç–æ–∫–µ–Ω–æ–≤ ‚¨áÔ∏è
# –í–ê–®–ò –ö–õ–Æ–ß–ò –í–°–¢–ê–í–õ–ï–ù–´ –°–Æ–î–ê (–°–ë–†–û–°–¨–¢–ï –ò–• –ü–û–°–õ–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!):
TELEGRAM_TOKEN = "8202084470:AAHAuO30oAjrbCR8XdDMehGu9gO7H_TWa2g"  
GEMINI_API_KEY = "AIzaSyAmMlywtFkMw5P9p03bC_hPjBp0IYXFyvo"  

# ----------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ----------------------------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini
try:
    gemini_client = genai.Client(api_key=GEMINI_API_KEY)
    gemini_model = "gemini-2.5-flash" 
except ValueError:
    logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GEMINI_API_KEY.")
    gemini_client = None


# ----------------------------------------
# 2. –ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
# ----------------------------------------

MESSAGES = {
    'ru': {
        'start_welcome': '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /profile.',
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose your language:',
        'lang_set': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.',
        'profile_start': '–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.',
        'ask_gender': '1/5. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        'ask_weight': '2/5. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75 –∫–≥):',
        'ask_height': '3/5. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 180 —Å–º):',
        'ask_activity': '4/5. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ù–∏–∑–∫–∏–π - –º–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è, –í—ã—Å–æ–∫–∏–π - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏):',
        'ask_goal': '5/5. –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å:',
        'invalid_number': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75).',
        'invalid_height': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 100 –¥–æ 250).',
        'profile_saved': '‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!',
        'profile_canceled': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        'no_profile': '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile.',
        'processing': '...–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...',
        'crit_error': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API-–∫–ª—é—á.',
        'api_error': '‚ùå –û—à–∏–±–∫–∞ Gemini API. –í–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–≤–æ—Ç–æ–π. –î–µ—Ç–∞–ª–∏: ',
        'unknown_error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –î–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: ',
        'analysis_header': '<b>‚úÖ –ê–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n\n'
    },
    'uz': {
        'start_welcome': 'Salom! üëã Men sizning kaloriya bo ªyicha yordamchingizman. Tahlil qilish uchun ovqatingizning rasmini yuboring. Shaxsiy tavsiyalar olish uchun /profile buyrug ªidan boshlang.',
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose your language:',
        'lang_set': 'Til O ªzbekcha qilib o ªrnatildi. /start buyrug ªidan boshlang.',
        'profile_start': 'Shaxsiylashtirilgan tavsiyalar uchun profilingizni sozlaylik.',
        'ask_gender': '1/5. Jinsingizni kiriting:',
        'ask_weight': '2/5. Hozirgi vazningizni kiriting (masalan, 75 kg):',
        'ask_height': '3/5. Bo ªyingizni santimetrda kiriting (masalan, 180 sm):',
        'ask_activity': '4/5. Jismoniy faollik darajangizni kiriting (Past - kam harakat, Yuqori - har kuni mashg ªulotlar):',
        'ask_goal': '5/5. Asosiy maqsadingiz qanday:',
        'invalid_number': 'Iltimos, faqat raqam kiriting (masalan, 75).',
        'invalid_height': 'Iltimos, bo ªyingizni santimetrda kiriting (masalan, 100 dan 250 gacha).',
        'profile_saved': '‚úÖ Profilingiz saqlandi. Endi tahlil va shaxsiy tavsiyalar uchun ovqat rasmini yuboring!',
        'profile_canceled': 'Profilni sozlash bekor qilindi.',
        'no_profile': 'Shaxsiylashtirilgan tavsiyalar olish uchun avval /profile buyrug ªi orqali profilingizni sozlang.',
        'processing': '...Rasmni tahlil qilmoqdaman va shaxsiy tavsiyalar tayyorlamoqdaman...',
        'crit_error': 'Kritik xato: Gemini xizmati mavjud emas. API kalitingizni tekshiring.',
        'api_error': '‚ùå Gemini API xatosi. Ehtimol, noto ªg ªri kalit yoki kvota muammosi. Tafsilotlar: ',
        'unknown_error': 'Kutilmagan xato yuz berdi. Iltimos, qaytadan urinib ko ªring. Dasturchi uchun tafsilotlar: ',
        'analysis_header': '<b>‚úÖ Tahlil va shaxsiy tavsiyalar:</b>\n\n'
    },
    'en': {
        'start_welcome': 'Hello! üëã I am your calorie assistant. Send me a photo of your food for analysis. For personalized recommendations, start with the /profile command.',
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose your language:',
        'lang_set': 'Language set to English. Start with the /start command.',
        'profile_start': 'Let\'s set up your profile for personalized recommendations.',
        'ask_gender': '1/5. Enter your gender:',
        'ask_weight': '2/5. Enter your current weight (e.g., 75 kg):',
        'ask_height': '3/5. Enter your height in centimeters (e.g., 180 cm):',
        'ask_activity': '4/5. Enter your physical activity level (Low - sedentary, High - daily training):',
        'ask_goal': '5/5. What is your main goal:',
        'invalid_number': 'Please enter only a number (e.g., 75).',
        'invalid_height': 'Please enter a realistic height in centimeters (e.g., between 100 and 250).',
        'profile_saved': '‚úÖ Your profile is saved. Now send a photo of your food for analysis and personalized recommendations!',
        'profile_canceled': 'Profile setup cancelled.',
        'no_profile': 'To receive personalized recommendations, please first set up your profile using the /profile command.',
        'processing': '...Analyzing photo and compiling personalized recommendations...',
        'crit_error': 'Critical error: Gemini service is unavailable. Check your API key.',
        'api_error': '‚ùå Gemini API error. Probably an incorrect key or quota issue. Details: ',
        'unknown_error': 'An unexpected error occurred. Please try again. Details for the developer: ',
        'analysis_header': '<b>‚úÖ Analysis and personalized recommendations:</b>\n\n'
    }
}

# ----------------------------------------
# 3. –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–Ø–∑—ã–∫ –∏ –ü—Ä–æ—Ñ–∏–ª—å)
# ----------------------------------------

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
SELECTING_LANGUAGE = 0
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
GENDER, WEIGHT, HEIGHT, ACTIVITY, GOAL = range(1, 6) 
USER_PROFILE_KEY = 'profile'
USER_LANG_KEY = 'language'

# ----------------------------------------
# 4. –§—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏
# ----------------------------------------

async def get_text(context, key):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ."""
    lang = context.user_data.get(USER_LANG_KEY, 'ru')
    return MESSAGES.get(lang, MESSAGES['ru']).get(key, MESSAGES['ru'][key])

async def select_language_start(update: Update, context) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (ENTRY POINT)."""
    reply_keyboard = [['–†—É—Å—Å–∫–∏–π', 'O ªzbekcha', 'English']]
    
    await update.message.reply_text(
        MESSAGES['ru']['select_lang'], 
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    return SELECTING_LANGUAGE

async def set_language(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    choice = update.message.text
    if choice == '–†—É—Å—Å–∫–∏–π':
        context.user_data[USER_LANG_KEY] = 'ru'
    elif choice == 'O ªzbekcha':
        context.user_data[USER_LANG_KEY] = 'uz'
    elif choice == 'English':
        context.user_data[USER_LANG_KEY] = 'en'
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        return SELECTING_LANGUAGE 

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await update.message.reply_text(
        await get_text(context, 'lang_set'),
        reply_markup=ReplyKeyboardRemove(),
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º conversation handler
    return ConversationHandler.END


# ----------------------------------------
# 5. –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ—Ñ–∏–ª—è (–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ)
# ----------------------------------------

async def start_command_handler(update: Update, context) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç conversation.
    """
    if USER_LANG_KEY not in context.user_data:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        return await select_language_start(update, context)
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(
            await get_text(context, 'start_welcome'),
            parse_mode='HTML'
        )
        return ConversationHandler.END


async def profile_start(update: Update, context) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª."""
    if USER_LANG_KEY not in context.user_data:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        await update.message.reply_text(MESSAGES['ru']['select_lang'])
        return ConversationHandler.END
        
    reply_keyboard = [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']]
    await update.message.reply_text(
        await get_text(context, 'profile_start') + '\n' + await get_text(context, 'ask_gender'),
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"
        ),
    )
    return GENDER

async def profile_gender(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–µ—Å."""
    gender = update.message.text
    context.user_data[USER_PROFILE_KEY] = {'gender': gender}
    await update.message.reply_text(
        await get_text(context, 'ask_weight'),
        reply_markup=ReplyKeyboardRemove(),
    )
    return WEIGHT

async def profile_weight(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–æ—Å—Ç."""
    try:
        weight = float(update.message.text.split()[0].replace(',', '.'))
        context.user_data[USER_PROFILE_KEY]['weight'] = weight
    except ValueError:
        await update.message.reply_text(await get_text(context, 'invalid_number'))
        return WEIGHT
    
    await update.message.reply_text(
        await get_text(context, 'ask_height'),
        reply_markup=ReplyKeyboardRemove(),
    )
    return HEIGHT

async def profile_height(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ—Å—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    try:
        height = float(update.message.text.split()[0].replace(',', '.'))
        if height < 50 or height > 300:
             await update.message.reply_text(await get_text(context, 'invalid_height'))
             return HEIGHT
             
        context.user_data[USER_PROFILE_KEY]['height'] = height
    except ValueError:
        await update.message.reply_text(await get_text(context, 'invalid_number'))
        return HEIGHT
    
    reply_keyboard = [['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']]
    await update.message.reply_text(
        await get_text(context, 'ask_activity'),
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å"
        ),
    )
    return ACTIVITY

async def profile_activity(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–ª—å."""
    activity = update.message.text
    context.user_data[USER_PROFILE_KEY]['activity'] = activity
    
    reply_keyboard = [['–°–±—Ä–æ—Å –≤–µ—Å–∞ (—Å—É—à–∫–∞)', '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã (—Ä–æ—Å—Ç –º—ã—à—Ü)', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞']]
    await update.message.reply_text(
        await get_text(context, 'ask_goal'),
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å"
        ),
    )
    return GOAL

async def profile_goal(update: Update, context) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    goal = update.message.text
    context.user_data[USER_PROFILE_KEY]['goal'] = goal
    
    profile_data = context.user_data[USER_PROFILE_KEY]
    
    await update.message.reply_text(
        f"{await get_text(context, 'profile_saved')}\n\n"
        f"–ü–æ–ª: {profile_data['gender']}\n"
        f"–í–µ—Å: {profile_data['weight']} –∫–≥\n"
        f"–†–æ—Å—Ç: {profile_data['height']} —Å–º\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile_data['activity']}\n"
        f"–¶–µ–ª—å: {profile_data['goal']}\n",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

async def profile_cancel(update: Update, context) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    await update.message.reply_text(
        await get_text(context, 'profile_canceled'), reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


# ----------------------------------------
# 6. –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
# ----------------------------------------

async def handle_photo(update: Update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –≤–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    if not gemini_client:
        await update.message.reply_text(await get_text(context, 'crit_error'))
        return

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ—Å–∏–º –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å
    if USER_LANG_KEY not in context.user_data:
        await update.message.reply_text(MESSAGES['ru']['select_lang'])
        return

    profile_data = context.user_data.get(USER_PROFILE_KEY)
    lang_code = context.user_data.get(USER_LANG_KEY, 'ru')
    
    # 1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not profile_data:
        await update.message.reply_text(await get_text(context, 'no_profile'))
        return

    user_context = (
        f"–£–ß–¢–ò–¢–ï –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n"
        f"–ü–æ–ª: {profile_data['gender']}, "
        f"–í–µ—Å: {profile_data['weight']} –∫–≥, "
        f"–†–æ—Å—Ç: {profile_data['height']} —Å–º, "
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile_data['activity']}, "
        f"–¶–µ–ª—å: {profile_data['goal']}. "
        f"–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª '5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å', –∏—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–π —Ü–µ–ª–∏, –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –¥–µ–Ω—å. "
        f"–û—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ {lang_code} —è–∑—ã–∫–µ."
    )

    processing_message = await update.message.reply_text(await get_text(context, 'processing'))

    try:
        photo_file = await update.message.photo[-1].get_file()
        buffer = BytesIO()
        await photo_file.download_to_memory(buffer)
        buffer.seek(0)
        image = Image.open(buffer)

        # 2. –ü–†–û–ú–ü–¢ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        prompt = (
            f"{user_context}\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û–ø—Ä–µ–¥–µ–ª–∏ –≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞, –æ—Ü–µ–Ω–∏ "
            "–ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –∏ –ø–æ—Å—á–∏—Ç–∞–π –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–ö–∫–∞–ª) –∏ —Å–æ—Å—Ç–∞–≤ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤. "
            f"–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ {lang_code} —è–∑—ã–∫–µ. –û—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ —Å–ø–∏—Å–æ–∫:\n"
            "1. –ë–ª—é–¥–æ/–ü—Ä–æ–¥—É–∫—Ç: [–ù–∞–∑–≤–∞–Ω–∏–µ]\n"
            "2. –û—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞: [–ß–∏—Å–ª–æ] –≥\n"
            "3. –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: [–ß–∏—Å–ª–æ] –ö–∫–∞–ª\n"
            "4. –°–æ—Å—Ç–∞–≤ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:\n"
            "   - –ë–µ–ª–∫–∏: [–ß–∏—Å–ª–æ] –≥\n"
            "   - –ñ–∏—Ä—ã: [–ß–∏—Å–ª–æ] –≥\n"
            "   - –£–≥–ª–µ–≤–æ–¥—ã: [–ß–∏—Å–ª–æ] –≥\n\n"
            "5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å (—Å —É—á–µ—Ç–æ–º —Ü–µ–ª–∏): [–ü—Ä–æ—Å—Ç–æ–π –∏ –ª–µ–≥–∫–∏–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –¥–µ–Ω—å]. –í –Ω–∞—á–∞–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–¥–æ –ø—É–Ω–∫—Ç–∞ 1) –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ <b>‚úÖ –ê–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <b></b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º."
        )
        
        # –í—ã–∑–æ–≤ API Gemini
        response = gemini_client.models.generate_content(
            model=gemini_model,
            contents=[prompt, image]
        )
        
        await update.message.reply_text(
            await get_text(context, 'analysis_header') + response.text,
            parse_mode='HTML'
        )

    except APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        await update.message.reply_text(
            f"‚ùå {await get_text(context, 'api_error')} {e}", parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            f"{await get_text(context, 'unknown_error')} <b>{type(e).__name__}</b>: {e}",
            parse_mode='HTML'
        )
    finally:
        await processing_message.delete()


# ----------------------------------------
# 7. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ----------------------------------------

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –û–¢–î–ï–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /language
    # –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ª—é–±–æ–π ConversationHandler
    language_command_handler = ConversationHandler(
        entry_points=[CommandHandler('language', select_language_start)],
        states={
            SELECTING_LANGUAGE: [MessageHandler(filters.Text(['–†—É—Å—Å–∫–∏–π', 'O ªzbekcha', 'English']) & ~filters.COMMAND, set_language)],
        },
        fallbacks=[CommandHandler('cancel', profile_cancel)],
        # –í–ê–ñ–ù–û: ConversationHandler –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π ConversationHandler
    )
    application.add_handler(language_command_handler)

    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π ConversationHandler –¥–ª—è /start –∏ /profile
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start_command_handler),
            CommandHandler('profile', profile_start)
        ],
        states={
            # –í–ù–ò–ú–ê–ù–ò–ï: SELECTING_LANGUAGE –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω,
            # —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π language_command_handler.
            # –ù–æ –µ—Å–ª–∏ /start —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –æ–Ω –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            SELECTING_LANGUAGE: [MessageHandler(filters.Text(['–†—É—Å—Å–∫–∏–π', 'O ªzbekcha', 'English']) & ~filters.COMMAND, set_language)],
            
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
            GENDER: [MessageHandler(filters.Text(['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']) & ~filters.COMMAND, profile_gender)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_height)], 
            ACTIVITY: [MessageHandler(filters.Text(['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']) & ~filters.COMMAND, profile_activity)],
            GOAL: [MessageHandler(filters.Text(['–°–±—Ä–æ—Å –≤–µ—Å–∞ (—Å—É—à–∫–∞)', '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã (—Ä–æ—Å—Ç –º—ã—à—Ü)', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞']) & ~filters.COMMAND, profile_goal)],
        },
        fallbacks=[CommandHandler('cancel', profile_cancel)],
        allow_reentry=True 
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
